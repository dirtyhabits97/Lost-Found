//
//  LoginInteractor.swift
//  AudibleLike
//
//  Created by Gonzalo Reyes Huertas on 7/7/17.
//  Copyright (c) 2017 Gonzalo Reyes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//  Template modified by Gabriel Lanata (http://StartApps.pe)
//

import UIKit

class LoginInteractor {
    
    var presenter = LoginPresenter()
    var checkStateLoginErrorWorker: CheckStateErrorWorker<User>!
    var checkStateRegisterErrorWorker: CheckStateErrorWorker<Bool>!
    
    var loginResultState: State<User>!
    var registerResultState: State<Bool>!
    
    // MARK: - Business logic
    func fetchPages(request: Login.FetchPages.Request) {
        let response = Login.FetchPages.Response(pages: Page.getPages())
        presenter.presentPages(response: response)
    }
    
    func checkLogin(request: Login.FetchCheckLogin.Request) {
        checkStateLoginErrorWorker = CheckStateErrorWorker()
        let params = request.loginRequestParams ?? [String: String]()
        Service.shared.loginUser(for: params) { [unowned self](resultState) in
            self.checkStateLoginErrorWorker.checkError(resultState: resultState, completion: { [unowned self](state) in
                self.loginResultState = state
                let response = Login.FetchCheckLogin.Response(resultState: self.loginResultState)
                self.presenter.presentCheckLogin(response: response)
            })
        }
    }
    
    func checkRegister(request: Login.FetchCheckRegister.Request) {
        checkStateRegisterErrorWorker = CheckStateErrorWorker()
        let params = request.registerRequestParams ?? [String: String]()
        Service.shared.registerUser(for: params) { [unowned self](resultState) in
            self.checkStateRegisterErrorWorker.checkError(resultState: resultState, completion: { [unowned self](state) in
                self.registerResultState = state
                let response = Login.FetchCheckRegister.Response(resultState: self.registerResultState, params: params)
                self.presenter.presentCheckRegister(response: response)
            })
        }
    }
}
